{"ast":null,"code":"var _jsxFileName = \"/Users/clarencekoh/Desktop/pern-todo/client/src/routes/PrivateRoute.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport ROUTES from \"./Routes\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { UserContext } from \"../utils/UserProvider\";\nimport Todos from \"../pages/Todos\";\n\nconst PrivateRoute = props => {\n  const {\n    username,\n    token\n  } = useContext(UserContext);\n  const [auth, setAuth] = useState(null);\n  useEffect(() => {\n    if (username && token) {\n      console.log(\"PRIVATENAME: \" + username);\n      console.log(\"PRIVATE TOKEN: \" + token);\n      setAuth({\n        name,\n        tok\n      });\n      console.log(\"PRIVATE AUTH: \" + auth);\n    }\n  }, [username, token]);\n\n  const isAuthenticated = () => auth != null;\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, props, {\n    render: props => isAuthenticated() ? /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: ROUTES.TODOLIST,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(Todos, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 70\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: ROUTES.LOGIN,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 32\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default PrivateRoute;","map":{"version":3,"sources":["/Users/clarencekoh/Desktop/pern-todo/client/src/routes/PrivateRoute.js"],"names":["React","useState","useEffect","useContext","ROUTES","Route","Redirect","UserContext","Todos","PrivateRoute","props","username","token","auth","setAuth","console","log","name","tok","isAuthenticated","TODOLIST","LOGIN"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAsBT,UAAU,CAACI,WAAD,CAAtC;AAEA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGS,QAAQ,IAAIC,KAAf,EAAsB;AAClBG,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBL,QAA9B;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBJ,KAAhC;AACAE,MAAAA,OAAO,CAAC;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,CAAP;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBH,IAA/B;AACH;AACJ,GAPQ,EAON,CAACF,QAAD,EAAWC,KAAX,CAPM,CAAT;;AASA,QAAMO,eAAe,GAAG,MAAMN,IAAI,IAAI,IAAtC;;AAEA,sBACI,oBAAC,KAAD,oBAAWH,KAAX;AAAkB,IAAA,MAAM,EAAEA,KAAK,IAC3BS,eAAe,kBAAM,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAEf,MAAM,CAACgB,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAoC,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApC,CAAN,gBACI,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAEhB,MAAM,CAACiB,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAMH,CAtBD;;AAwBA,eAAeZ,YAAf","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport ROUTES from \"./Routes\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { UserContext } from \"../utils/UserProvider\";\nimport Todos from \"../pages/Todos\";\n\nconst PrivateRoute = (props) => {\n    const { username, token } = useContext(UserContext);\n\n    const [auth, setAuth] = useState(null);\n\n    useEffect(() => {\n        if(username && token) {\n            console.log(\"PRIVATENAME: \" + username);\n            console.log(\"PRIVATE TOKEN: \" + token);\n            setAuth({ name, tok });\n            console.log(\"PRIVATE AUTH: \" + auth);\n        }\n    }, [username, token]);\n\n    const isAuthenticated = () => auth != null;\n\n    return (\n        <Route {...props} render={props => \n            isAuthenticated() ? (<Route exact path={ROUTES.TODOLIST}><Todos /></Route>)\n                            : (<Redirect to={ROUTES.LOGIN} />)\n        } />\n    );\n}\n\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}